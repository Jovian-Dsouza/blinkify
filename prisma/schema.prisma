generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  walletAddress String     @id @unique
  name          String?
  role          Role       @default(USER)
  createdAt     DateTime   @default(now())
  ads           Ad[]       // Ads created by the user
  paymentsMade  Payment[]  @relation("BuyerRelation")  // Payments made by the user
  paymentsReceived Payment[] @relation("CreatorRelation") // Payments received by the user as a creator
  email         String?    // User's email
}

model Ad {
  id            String     @id @unique @default(uuid())
  paymentAddress String
  title         String
  content       String
  mediaUrl      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  active        Boolean    // Indicates if the ad is active
  amount        Decimal    // Amount associated with the ad
  tokenAddress  String     // Token address for payment
  network       String    // Network used for the ad (e.g., Solana)
  analytics     Analytics? // Analytics associated with the ad
  user          User       @relation(fields: [paymentAddress], references: [walletAddress]) // Relation to the user who created the ad
  payments      Payment[]  // Payments associated with the ad
}

model Analytics {
  adId         String     @id @unique // Unique ID for the ad
  totalClicks  Int        @default(0) // Total number of clicks on the ad
  totalSales   Int        @default(0) // Total number of sales generated by the ad
  totalRevenue Decimal    @default(0.00) // Total revenue generated by the ad
  lastUpdated  DateTime   @updatedAt // Last time the analytics were updated
  ad           Ad         @relation(fields: [adId], references: [id], onDelete: Cascade) // Relation to the associated ad
}

model Payment {
  id            String     @id @unique @default(uuid())
  walletAddress String
  email         String     // Email associated with the payment
  amount        Decimal    // Payment amount
  tokenAddress  String     // Token address used in the payment
  network       String    // Network used for the payment (e.g., Solana)
  adId          String     // ID of the ad being paid for
  paymentAt     DateTime   @default(now()) // Timestamp of when the payment was made
  feeAddress    String     // Address to which the fee was paid
  feeAmount     Decimal    // Amount of the fee
  creatorAddress String    // Address of the creator who received the payment
  txnSignature  String?    // Optional transaction signature
  status        PaymentStatus @default(INPROGRESS) // Current status of the payment

  buyer         User       @relation("BuyerRelation", fields: [walletAddress], references: [walletAddress]) // Relation to the buyer (user who made the payment)
  creator       User       @relation("CreatorRelation", fields: [creatorAddress], references: [walletAddress]) // Relation to the creator (user who received the payment)
  ad            Ad         @relation(fields: [adId], references: [id]) // Relation to the ad being paid for
}

enum Role {
  USER         // Regular user role
  ADMIN        // Admin role with additional privileges
}

enum PaymentStatus {
  SUCCESS      // Payment was successful
  INPROGRESS   // Payment is in progress
  FAILED       // Payment failed
}
